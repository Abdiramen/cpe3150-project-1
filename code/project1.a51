	#include<reg932.inc>

	NUMLEVELs EQU 5
	NUMLEVELSPLUS EQU 6
	RANDREG EQU 0X20
	LED1 BIT P2.4
	LED2 BIT P0.5
	LED3 BIT P2.7
	LED4 BIT P0.6
	LED5 BIT P1.6
	LED6 BIT P0.4
	LED7 BIT P2.5
	LED8 BIT P0.7
	LED9 BIT P2.6
	BTN1 BIT P2.0
	BTN2 BIT P0.1
	BTN3 BIT P2.3
	BTN4 BIT P0.2
	BTN5 BIT P1.4
	BTN6 BIT P0.0
	BTN7 BIT P2.1
	BTN8 BIT P0.3
	BTN9 BIT P2.2

	CSEG AT 0

	MOV R2, #0
	MOV P3M1, #00H
    MOV P3M2, #00H
    MOV P2M1, #00H
    MOV P2M2, #00H
    MOV P1M1, #00H
    MOV P1M2, #00H
    MOV P0M1, #00H
    MOV P0M2, #00H

MAIN:
	JNB BTN9, BEGINGAME
	JB P2.0, NO_DEC

WAIT1:
	JNB P2.0, WAIT1
	DEC R2
	CJNE R2, #0FFH, LED
	ACALL BEEP
	MOV R2, #15
	SJMP LED

NO_DEC:
	JB P0.1, MAIN

WAIT2:
	JNB P0.1, WAIT2
	INC R2
	CJNE R2, #16, LED
	ACALL BEEP
	MOV R2, #0
	SJMP LED

LED:
	MOV A, R2
	CPL A
	RRC A
	MOV P0.6, C
	RRC A
	MOV P2.7, C
	RRC A
	MOV P0.5, C
	RRC A
	MOV P2.4, C
	SJMP MAIN
CLRLEDS:
	SETB P0.6
	SETB P2.7
	SETB P0.5
	SETB P2.4
	RET
BEGINGAME:
	ACALL CLRLEDS
	JNB BTN9, $
GAME:
	SETB PSW.4
	SETB PSW.3
	ACALL NEXTLEVEL
	CLR PSW.3
	ACALL GENERATE
	MOV R0, #30H
	MOV R2, #1
	
START:
	MOV R1, #30H
	MOV R4, 12H
	ACALL DISPSEQ
	MOV R6, 12H
INPUT:
	MOV A, #0
	ACALL GETINPUT
	JZ INPUT
	CLR PSW.4
	ACALL SDELAY
	SETB PSW.4
	MOV R5, A
	MOV A, @R0
	CJNE A, 15H, INCORRECT
	MOV A, 0
	INC R0
	DJNZ R6, INPUT
	MOV R0, #30H
	INC R2
	CJNE R2, #NUMLEVELSPLUS, START
	CLR PSW.4
	ACALL WINNER
	MOV R2, #0
	RET
INCORRECT:
	CLR PSW.4
	ACALL LOST
	MOV R2, #0
	RET
	
GENERATE:
	MOV R0, #30H
	MOV R7, #NUMLEVELS
NEXT_GEN:
	CLR PSW.4
	ACALL RNG
	SETB PSW.4
	MOV @R0, A
	INC R0
	DJNZ R7, NEXT_GEN
	RET
	
	
DISPSEQ:
	MOV A, @R1
	SETB PSW.3
	ACALL TOGGLELIGHT
	CLR PSW.3
	INC R1
	DJNZ R4, DISPSEQ
	MOV R1, #30H
	RET
GETINPUT:
	JNB BTN1, BTN1PRESSED
	SJMP BTN2CHECK
BTN1PRESSED:
	MOV A, #1
WAITBTN1: JNB BTN1, WAITBTN1
	RET
BTN2CHECK:
	JNB BTN2, BTN2PRESSED
	SJMP BTN3CHECK
BTN2PRESSED:
	MOV A, #2
WAITBTN2: JNB BTN2, WAITBTN2
	RET
BTN3CHECK:
	JNB BTN3, BTN3PRESSED
	SJMP BTN4CHECK
BTN3PRESSED:
	MOV A, #3
WAITBTN3: JNB BTN3, WAITBTN3
	RET
BTN4CHECK:
	JNB BTN4, BTN4PRESSED
	SJMP BTN5CHECK
BTN4PRESSED:
	MOV A, #4
WAITBTN4: JNB BTN4, WAITBTN4
	RET
BTN5CHECK:
	JNB BTN5, BTN5PRESSED
	SJMP BTN6CHECK
BTN5PRESSED:
	MOV A, #5
WAITBTN5: JNB BTN5, WAITBTN5
	RET
BTN6CHECK:
	JNB BTN6, BTN6PRESSED
	SJMP BTN7CHECK
BTN6PRESSED:
	MOV A, #6
WAITBTN6: JNB BTN6, WAITBTN6
	RET
BTN7CHECK:
	JNB BTN7, BTN7PRESSED
	SJMP BTN8CHECK
BTN7PRESSED:
	MOV A, #7
WAITBTN7: JNB BTN7, WAITBTN7
	RET
BTN8CHECK:
	JNB BTN8, BTN8PRESSED
	SJMP BTN9CHECK
BTN8PRESSED:
	MOV A, #8
WAITBTN8: JNB BTN8, WAITBTN8
	RET
BTN9CHECK:
	JNB BTN9, BTN9PRESSED
	RET
BTN9PRESSED:
	MOV A, #9
WAITBTN9: JNB BTN9, WAITBTN9
	RET
	
TOGGLELIGHT:
	CJNE A, #1, NEXT1
	CPL LED1
	ACALL LDELAY
	CPL LED1
	ACALL MDELAY
NEXT1:
	CJNE A, #2, NEXT2
	CPL LED2
	ACALL LDELAY
	CPL LED2
	ACALL MDELAY
NEXT2:
	CJNE A, #3, NEXT3
	CPL LED3
	ACALL LDELAY
	CPL LED3
	ACALL MDELAY
NEXT3:
	CJNE A, #4, NEXT4
	CPL LED4
	ACALL LDELAY
	CPL LED4
	ACALL MDELAY
NEXT4:
	CJNE A, #5, NEXT5
	CPL LED5
	ACALL LDELAY
	CPL LED5
	ACALL MDELAY
NEXT5:
	CJNE A, #6, NEXT6
	CPL LED6
	ACALL LDELAY
	CPL LED6
	ACALL MDELAY
NEXT6:
	CJNE A, #7, NEXT7
	CPL LED7
	ACALL LDELAY
	CPL LED7
	ACALL MDELAY
NEXT7:
	CJNE A, #8, NEXT8
	CPL LED8
	ACALL LDELAY
	CPL LED8
	ACALL MDELAY
NEXT8:
	CJNE A, #9, NEXT9
	CPL LED9
	ACALL LDELAY
	CPL LED9
	ACALL MDELAY
NEXT9:
	RET
	
	
	
LDELAY:
	SETB PSW.3
	MOV R7, #50
NEXTL:
	MOV TMOD, #01
	MOV TH0, #0H
	MOV TL0, #0H
	SETB TR0
HERET:	JNB TF0, HERET
	CLR TR0
	CLR TF0
	DJNZ R7, NEXTL
	CLR PSW.3
	RET
	
MDELAY:
	SETB PSW.3
	MOV R7, #25
NEXTM:
	MOV TMOD, #01
	MOV TH0, #0H
	MOV TL0, #0H
	SETB TR0
HEREM:	JNB TF0, HERET
	CLR TR0
	CLR TF0
	DJNZ R7, NEXTL
	CLR PSW.3
	RET
; this mostly came from trial and error
; and seeing what sounded good for a beep
; reference canvas tutorial for this
BEEP:
	MOV R0, #100
S1:	CPL P1.7
	ACALL SDELAY
	DJNZ R0, S1

	RET

SDELAY:
	MOV R1, #100
D1: MOV R2, #10
D2: DJNZ R2, D2
	DJNZ R1, D1
	RET


; note this a port from http://pjrc.com/tech/8051/rand.asm
; returns a random value in the A  register from 0 to 9, inclusive.
; note needs a seed value (equated at the top)
RNG:
	MOV	A, RANDREG
	JNZ	RAND8B
	CPL	A
	MOV	RANDREG, A
RAND8B:	ANL	A, #10111000B
	MOV	C, PSW.0
	MOV	A, RANDREG
	RLC	A
	MOV	RANDREG, A
	MOV B, #8D
	DIV AB
	MOV A, B
	INC A
	RET

; enables a row of lights with a delay of ~75 ms
; read documenation how this works, but for now a quick summary..
; mov into A bit-string for the first 8 lights
; move into c for the ninth light
; i.e. A = 10101010 C = 1
; enables a huge X of lights
LIGHTS:
	CPL A
	CPL C

	RLC A
	MOV P2.4, C

	RLC A
	MOV P0.5, C

	RLC A
	MOV P2.7, C

	RLC A
	MOV P0.6, C

	RLC A
	MOV P1.6, C

	RLC A
	MOV P0.4, C

	RLC A
	MOV P2.5, C

	RLC A
	MOV P0.7, C

	RLC A
	MOV P2.6, C

	MOV A, #00D
	MOV B, #00D
	ACALL EDELAY
	RET

CLRLIGHTS:
	MOV A, #0
	CLR C
	CPL A
	CPL C

	RLC A
	MOV P2.4, C

	RLC A
	MOV P0.5, C

	RLC A
	MOV P2.7, C

	RLC A
	MOV P0.6, C

	RLC A
	MOV P1.6, C

	RLC A
	MOV P0.4, C

	RLC A
	MOV P2.5, C

	RLC A
	MOV P0.7, C

	RLC A
	MOV P2.6, C

; envokes a timer delay
; A = high, B = 0
; use formula from class to determine dla
DELAY:
	MOV TMOD, #01D
	MOV TL0, B
	MOV TH0, A

	SETB TR0

DLLOOP:
	JNB TF0, DLLOOP

	CLR TR0
	CLR TF0

	RET

; Extended delay, uses timers on the 8051
; A = high of the timer, B = low of the timer
; And R7 is the multiple of iterations
; it's basically DELAY * SOME CONSTANT
EDELAY:
EDLOOP:
	ACALL DELAY
	DJNZ R7, EDLOOP
	RET

; USES REGISTERS A, B, R6, R7
; light sequence for the next level
NEXTLEVEL:
	MOV R5, #03
	MOV R6, #2D
LLOOP:
	MOV A, #10101010B
	SETB C
	MOV R7, #20D
	ACALL LIGHTS

	MOV A, #10101010B
	CPL A
	CLR C
	MOV R7, #20D
	ACALL LIGHTS

	DJNZ R6, LLOOP
	
	MOV A, #0D
	CLR C
	ACALL CLRLIGHTS
	ACALL LDELAY

	RET

; USES REGISTERS R6, R7, A, B
; light sequence for the losing state
; bright flash of lights twice
LOST:
	MOV R6, #2D

LOLOOP:
	MOV A, #0FFH
	SETB C
	MOV R7, #20D
	ACALL LIGHTS

	CLR A
	CLR C
	MOV R7, #20D
	ACALL LIGHTS

	DJNZ R6, LOLOOP

	RET

; USES REGISTERS R6, R7, A, B
; light sequence for the winning state
WINNER:
	/* LIGHT SPIRAL PART I	*/
	MOV R6, #3D

	MOV A, #00000000B
    CLR C
	MOV R7, 6
	ACALL LIGHTS

    MOV A, #10000000B
    CLR C
	MOV R7, 6
	ACALL LIGHTS

    MOV A, #11000000B
    CLR C
	MOV R7, 6
	ACALL LIGHTS

    MOV A, #11100000B
    CLR C
	MOV R7, 6
	ACALL LIGHTS

    MOV A, #11100100B
    CLR C
	MOV R7, 6
	ACALL LIGHTS

    MOV A, #11100100B
    SETB C
	MOV R7, 6
	ACALL LIGHTS

    MOV A, #11100101B
    SETB C
	MOV R7, 6
	ACALL LIGHTS

    MOV A, #11100111B
    SETB C
	MOV R7, 6
	ACALL LIGHTS

    MOV A, #11110111B
    SETB C
	MOV R7, 6
	ACALL LIGHTS

    MOV A, #11111111B
    SETB C
	MOV R7, 6
	ACALL LIGHTS

	/* LIGHT SPIRAL PART II	*/

	MOV A, #00000000B
	CLR C
	MOV R7, 6
	CPL A
	CPL C
	ACALL LIGHTS

	MOV A, #10000000B
	CLR C
	MOV R7, 6
	CPL A
	CPL C
	ACALL LIGHTS

	MOV A, #11000000B
	CLR C
	MOV R7, 6
	CPL A
	CPL C
	ACALL LIGHTS

	MOV A, #11100000B
	CLR C
	MOV R7, 6
	CPL A
	CPL C
	ACALL LIGHTS

	MOV A, #11100100B
	CLR C
	MOV R7, 6
	CPL A
	CPL C
	ACALL LIGHTS

	MOV A, #11100100B
	SETB C
	MOV R7, 6
	CPL A
	CPL C
	ACALL LIGHTS

	MOV A, #11100101B
	SETB C
	MOV R7, 6
	CPL A
	CPL C
	ACALL LIGHTS

	MOV A, #11100111B
	SETB C
	MOV R7, 6
	CPL A
	CPL C
	ACALL LIGHTS

	MOV A, #11110111B
	SETB C
	MOV R7, 6
	CPL A
	CPL C
	ACALL LIGHTS

	MOV A, #11111111B
	SETB C
	MOV R7, 6
	CPL A
	CPL C
	ACALL LIGHTS

	/* FULL LIGHT SPIRAL */
	MOV R6, #8D
	MOV R5, #5D
L1:
	MOV A, #10101010B
	SETB C
	MOV R7, 6
	ACALL LIGHTS

	MOV A, #01011101B
	CLR C
	MOV R7, 6
	ACALL LIGHTS

	DJNZ R5, L1

	/* Os */
	MOV R6, #8D
	MOV R5, #7D
L2:
	MOV A, #11110111B
	SETB C
	MOV R7, 6
	ACALL LIGHTS

	MOV A, #00001000B
	CLR C
	MOV R7, 6
	ACALL LIGHTS
	DJNZ R5, L2

	/* transitions well into..*/
	MOV A, #11110111B
	SETB C
	MOV R7, 6
	ACALL LIGHTS

	/* The windmill */
	MOV R6, #6D
	MOV R5, #7D

L3:
	MOV A, #10001000B
	SETB C
	MOV R7, 6
	ACALL LIGHTS

	MOV A, #01001001B
	CLR C
	MOV R7, 6
	ACALL LIGHTS

	MOV A, #00101010B
	CLR C
	MOV R7, 6
	ACALL LIGHTS

	MOV A, #00011100B
	CLR C
	MOV R7, 6
	ACALL LIGHTS

	DJNZ R5, L3

	/* again transition */
	MOV A, #10001000B
	SETB C
	MOV R7, 6
	ACALL LIGHTS

	/* C'mon Kage, bring the thundaaa */
	MOV R6, #6D
	MOV R5, #3D

L4:
	MOV A, #10000000B
	CLR C
	MOV R7, 6
	ACALL LIGHTS


	MOV A, #11010000B
	CLR C
	MOV R7, 6
	ACALL LIGHTS


	MOV A, #11111010B
	CLR C
	MOV R7, 6
	ACALL LIGHTS


	MOV A, #11111111B
	CLR C
	MOV R7, 6
	ACALL LIGHTS


	MOV A, #11111111B
	SETB C
	MOV R7, 6
	ACALL LIGHTS

	; role reversal

	MOV A, #10000000B
	CLR C
	CPL A
	CPL C
	MOV R7, 6
	ACALL LIGHTS


	MOV A, #11010000B
	CLR C
	CPL A
	CPL C
	MOV R7, 6
	ACALL LIGHTS


	MOV A, #11111010B
	CLR C
	CPL A
	CPL C
	MOV R7, 6
	ACALL LIGHTS


	MOV A, #11111111B
	CLR C
	CPL A
	CPL C
	MOV R7, 6
	ACALL LIGHTS


	MOV A, #11111111B
	SETB C
	CPL A
	CPL C
	MOV R7, 6
	ACALL LIGHTS

	DJNZ R5, L4
	RET

	END